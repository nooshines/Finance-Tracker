{"ast":null,"code":"var _jsxFileName = \"/Users/nooshin/Desktop/My Projects/expense-tracker/src/components/IncomeForm.js\";\nimport React, { useState, useContext } from \"react\";\nimport { BudgetContext } from \"../context/BudgetContext\";\nimport { addIncome } from \"../api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\"\n    }\n  },\n  textField: {\n    width: \"30%\",\n    margin: \"2px\"\n  }\n}));\n\nconst IncomeForm = () => {\n  const classes = useStyles();\n  const {\n    incomes,\n    setIncome\n  } = useContext(BudgetContext);\n  const [incomeInput, setIncomeInput] = useState(\"\");\n  const [amountInput, setAmountInput] = useState(\"\");\n  const [errorIncomeInput, setErrorIncomeInput] = useState(\"\");\n  const [errorAmountInput, setErrorAmountInput] = useState(\"\");\n\n  const submitHandler = async e => {\n    e.preventDefault();\n\n    if (incomeInput && amountInput) {\n      const newIncome = await addIncome({\n        title: incomeInput,\n        amount: amountInput * 1\n      });\n      setIncome([...incomes, newIncome]);\n      setIncomeInput(\"\");\n      setAmountInput(\"\");\n      setErrorIncomeInput(\"\");\n      setErrorAmountInput(\"\");\n    } else {\n      if (!incomeInput) {\n        setErrorIncomeInput(\"Income Input is required\");\n      }\n\n      if (!amountInput) {\n        setErrorAmountInput(\"Amount Input is required\");\n      }\n    }\n  };\n\n  const onChangeHandler = e => {\n    if (e.currentTarget.name === \"income\") {\n      setIncomeInput(e.currentTarget.value);\n    } else {\n      setAmountInput(e.currentTarget.value);\n    }\n  };\n\n  const onBlurHandler = e => {\n    if (e.currentTarget.name === \"income\") {\n      setIncomeInput(e.currentTarget.value);\n      !e.currentTarget.value ? setErrorIncomeInput(\"Income Input is required\") : setErrorIncomeInput(\"\");\n    } else {\n      setAmountInput(e.currentTarget.value);\n      !e.currentTarget.value ? setErrorAmountInput(\"Amount Input is required\") : setErrorAmountInput(\"\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: classes.root,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    error: errorIncomeInput ? true : false,\n    helperText: errorIncomeInput ? errorIncomeInput : \"\",\n    label: \"income\",\n    variant: \"outlined\",\n    name: \"income\",\n    value: incomeInput,\n    onChange: onChangeHandler,\n    onBlur: onBlurHandler,\n    className: classes.textField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    error: errorAmountInput ? true : false,\n    helperText: errorAmountInput ? errorAmountInput : \"\",\n    type: \"number\",\n    label: \"amount\",\n    variant: \"outlined\",\n    name: \"amount\",\n    value: amountInput,\n    onChange: onChangeHandler,\n    onBlur: onBlurHandler,\n    className: classes.textField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nexport default IncomeForm;","map":{"version":3,"sources":["/Users/nooshin/Desktop/My Projects/expense-tracker/src/components/IncomeForm.js"],"names":["React","useState","useContext","BudgetContext","addIncome","makeStyles","TextField","Button","useStyles","theme","root","margin","spacing","width","textField","IncomeForm","classes","incomes","setIncome","incomeInput","setIncomeInput","amountInput","setAmountInput","errorIncomeInput","setErrorIncomeInput","errorAmountInput","setErrorAmountInput","submitHandler","e","preventDefault","newIncome","title","amount","onChangeHandler","currentTarget","name","value","onBlurHandler"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { BudgetContext } from \"../context/BudgetContext\";\nimport { addIncome } from \"../api\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n  textField: {\n    width: \"30%\",\n\n    margin: \"2px\",\n  },\n}));\n\nconst IncomeForm = () => {\n  const classes = useStyles();\n\n  const { incomes, setIncome } = useContext(BudgetContext);\n  const [incomeInput, setIncomeInput] = useState(\"\");\n  const [amountInput, setAmountInput] = useState(\"\");\n  const [errorIncomeInput, setErrorIncomeInput] = useState(\"\");\n  const [errorAmountInput, setErrorAmountInput] = useState(\"\");\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (incomeInput && amountInput) {\n      const newIncome = await addIncome({\n        title: incomeInput,\n        amount: amountInput * 1,\n      });\n      setIncome([...incomes, newIncome]);\n      setIncomeInput(\"\");\n      setAmountInput(\"\");\n      setErrorIncomeInput(\"\");\n      setErrorAmountInput(\"\");\n    } else {\n      if (!incomeInput) {\n        setErrorIncomeInput(\"Income Input is required\");\n      }\n      if (!amountInput) {\n        setErrorAmountInput(\"Amount Input is required\");\n      }\n    }\n  };\n\n  const onChangeHandler = (e) => {\n    if (e.currentTarget.name === \"income\") {\n      setIncomeInput(e.currentTarget.value);\n    } else {\n      setAmountInput(e.currentTarget.value);\n    }\n  };\n\n  const onBlurHandler = (e) => {\n    if (e.currentTarget.name === \"income\") {\n      setIncomeInput(e.currentTarget.value);\n      !e.currentTarget.value\n        ? setErrorIncomeInput(\"Income Input is required\")\n        : setErrorIncomeInput(\"\");\n    } else {\n      setAmountInput(e.currentTarget.value);\n      !e.currentTarget.value\n        ? setErrorAmountInput(\"Amount Input is required\")\n        : setErrorAmountInput(\"\");\n    }\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={submitHandler}\n        className={classes.root}\n        autoComplete=\"off\"\n      >\n        <TextField\n          error={errorIncomeInput ? true : false}\n          helperText={errorIncomeInput ? errorIncomeInput : \"\"}\n          label=\"income\"\n          variant=\"outlined\"\n          name=\"income\"\n          value={incomeInput}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n          className={classes.textField}\n        />\n        <TextField\n          error={errorAmountInput ? true : false}\n          helperText={errorAmountInput ? errorAmountInput : \"\"}\n          type=\"number\"\n          label=\"amount\"\n          variant=\"outlined\"\n          name=\"amount\"\n          value={amountInput}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n          className={classes.textField}\n        />\n        <Button type=\"submit\" variant=\"contained\">\n          Submit\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default IncomeForm;\n"]},"metadata":{},"sourceType":"module"}